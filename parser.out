Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> simple_statement
Rule 5     statement -> compound_statement
Rule 6     statement -> COMMENT
Rule 7     simple_statement -> assignment
Rule 8     simple_statement -> function_call
Rule 9     simple_statement -> return_statement
Rule 10    simple_statement -> print_statement
Rule 11    compound_statement -> function_def
Rule 12    compound_statement -> if_statement
Rule 13    compound_statement -> while_statement
Rule 14    compound_statement -> for_statement
Rule 15    assignment -> ID EQUALS expression
Rule 16    function_call -> ID LPAREN expression_list RPAREN
Rule 17    expression_list -> expression
Rule 18    expression_list -> expression_list COMMA expression
Rule 19    expression_list -> <empty>
Rule 20    return_statement -> RETURN expression
Rule 21    print_statement -> PRINT LPAREN expression RPAREN
Rule 22    function_def -> DEF ID LPAREN parameter_list RPAREN COLON block
Rule 23    parameter_list -> ID
Rule 24    parameter_list -> parameter_list COMMA ID
Rule 25    parameter_list -> <empty>
Rule 26    if_statement -> IF expression COLON block
Rule 27    if_statement -> IF expression COLON block ELSE COLON block
Rule 28    while_statement -> WHILE expression COLON block
Rule 29    for_statement -> FOR ID IN expression COLON block
Rule 30    block -> INDENT statement_list DEDENT
Rule 31    expression -> arithmetic_expr
Rule 32    expression -> comparison_expr
Rule 33    expression -> STRING
Rule 34    expression -> NUMBER
Rule 35    expression -> ID
Rule 36    expression -> function_call
Rule 37    arithmetic_expr -> term
Rule 38    arithmetic_expr -> arithmetic_expr PLUS term
Rule 39    arithmetic_expr -> arithmetic_expr MINUS term
Rule 40    term -> factor
Rule 41    term -> term TIMES factor
Rule 42    term -> term DIVIDE factor
Rule 43    factor -> LPAREN expression RPAREN
Rule 44    factor -> NUMBER
Rule 45    factor -> ID
Rule 46    comparison_expr -> arithmetic_expr GT arithmetic_expr
Rule 47    comparison_expr -> arithmetic_expr LT arithmetic_expr
Rule 48    comparison_expr -> arithmetic_expr GE arithmetic_expr
Rule 49    comparison_expr -> arithmetic_expr LE arithmetic_expr
Rule 50    comparison_expr -> arithmetic_expr EQ arithmetic_expr
Rule 51    comparison_expr -> arithmetic_expr NE arithmetic_expr

Terminals, with rules where they appear

COLON                : 22 26 27 27 28 29
COMMA                : 18 24
COMMENT              : 6
DEDENT               : 30
DEF                  : 22
DIVIDE               : 42
ELSE                 : 27
EQ                   : 50
EQUALS               : 15
FOR                  : 29
GE                   : 48
GT                   : 46
ID                   : 15 16 22 23 24 29 35 45
IF                   : 26 27
IN                   : 29
INDENT               : 30
LE                   : 49
LPAREN               : 16 21 22 43
LT                   : 47
MINUS                : 39
NE                   : 51
NUMBER               : 34 44
PLUS                 : 38
PRINT                : 21
RETURN               : 20
RPAREN               : 16 21 22 43
STRING               : 33
TIMES                : 41
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 31 38 39 46 46 47 47 48 48 49 49 50 50 51 51
assignment           : 7
block                : 22 26 27 27 28 29
comparison_expr      : 32
compound_statement   : 5
expression           : 15 17 18 20 21 26 27 28 29 43
expression_list      : 16 18
factor               : 40 41 42
for_statement        : 14
function_call        : 8 36
function_def         : 11
if_statement         : 12
parameter_list       : 22 24
print_statement      : 10
program              : 0
return_statement     : 9
simple_statement     : 4
statement            : 2 3
statement_list       : 1 3 30
term                 : 37 38 39 41 42
while_statement      : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) statement -> . COMMENT
    (7) simple_statement -> . assignment
    (8) simple_statement -> . function_call
    (9) simple_statement -> . return_statement
    (10) simple_statement -> . print_statement
    (11) compound_statement -> . function_def
    (12) compound_statement -> . if_statement
    (13) compound_statement -> . while_statement
    (14) compound_statement -> . for_statement
    (15) assignment -> . ID EQUALS expression
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (20) return_statement -> . RETURN expression
    (21) print_statement -> . PRINT LPAREN expression RPAREN
    (22) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON block
    (26) if_statement -> . IF expression COLON block
    (27) if_statement -> . IF expression COLON block ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block
    (29) for_statement -> . FOR ID IN expression COLON block

    COMMENT         shift and go to state 6
    ID              shift and go to state 15
    RETURN          shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    assignment                     shift and go to state 7
    function_call                  shift and go to state 8
    return_statement               shift and go to state 9
    print_statement                shift and go to state 10
    function_def                   shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    for_statement                  shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) statement -> . COMMENT
    (7) simple_statement -> . assignment
    (8) simple_statement -> . function_call
    (9) simple_statement -> . return_statement
    (10) simple_statement -> . print_statement
    (11) compound_statement -> . function_def
    (12) compound_statement -> . if_statement
    (13) compound_statement -> . while_statement
    (14) compound_statement -> . for_statement
    (15) assignment -> . ID EQUALS expression
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (20) return_statement -> . RETURN expression
    (21) print_statement -> . PRINT LPAREN expression RPAREN
    (22) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON block
    (26) if_statement -> . IF expression COLON block
    (27) if_statement -> . IF expression COLON block ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block
    (29) for_statement -> . FOR ID IN expression COLON block

    $end            reduce using rule 1 (program -> statement_list .)
    COMMENT         shift and go to state 6
    ID              shift and go to state 15
    RETURN          shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    statement                      shift and go to state 22
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    assignment                     shift and go to state 7
    function_call                  shift and go to state 8
    return_statement               shift and go to state 9
    print_statement                shift and go to state 10
    function_def                   shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    for_statement                  shift and go to state 14

state 3

    (2) statement_list -> statement .

    COMMENT         reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    DEF             reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    DEDENT          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> simple_statement .

    COMMENT         reduce using rule 4 (statement -> simple_statement .)
    ID              reduce using rule 4 (statement -> simple_statement .)
    RETURN          reduce using rule 4 (statement -> simple_statement .)
    PRINT           reduce using rule 4 (statement -> simple_statement .)
    DEF             reduce using rule 4 (statement -> simple_statement .)
    IF              reduce using rule 4 (statement -> simple_statement .)
    WHILE           reduce using rule 4 (statement -> simple_statement .)
    FOR             reduce using rule 4 (statement -> simple_statement .)
    $end            reduce using rule 4 (statement -> simple_statement .)
    DEDENT          reduce using rule 4 (statement -> simple_statement .)


state 5

    (5) statement -> compound_statement .

    COMMENT         reduce using rule 5 (statement -> compound_statement .)
    ID              reduce using rule 5 (statement -> compound_statement .)
    RETURN          reduce using rule 5 (statement -> compound_statement .)
    PRINT           reduce using rule 5 (statement -> compound_statement .)
    DEF             reduce using rule 5 (statement -> compound_statement .)
    IF              reduce using rule 5 (statement -> compound_statement .)
    WHILE           reduce using rule 5 (statement -> compound_statement .)
    FOR             reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)
    DEDENT          reduce using rule 5 (statement -> compound_statement .)


state 6

    (6) statement -> COMMENT .

    COMMENT         reduce using rule 6 (statement -> COMMENT .)
    ID              reduce using rule 6 (statement -> COMMENT .)
    RETURN          reduce using rule 6 (statement -> COMMENT .)
    PRINT           reduce using rule 6 (statement -> COMMENT .)
    DEF             reduce using rule 6 (statement -> COMMENT .)
    IF              reduce using rule 6 (statement -> COMMENT .)
    WHILE           reduce using rule 6 (statement -> COMMENT .)
    FOR             reduce using rule 6 (statement -> COMMENT .)
    $end            reduce using rule 6 (statement -> COMMENT .)
    DEDENT          reduce using rule 6 (statement -> COMMENT .)


state 7

    (7) simple_statement -> assignment .

    COMMENT         reduce using rule 7 (simple_statement -> assignment .)
    ID              reduce using rule 7 (simple_statement -> assignment .)
    RETURN          reduce using rule 7 (simple_statement -> assignment .)
    PRINT           reduce using rule 7 (simple_statement -> assignment .)
    DEF             reduce using rule 7 (simple_statement -> assignment .)
    IF              reduce using rule 7 (simple_statement -> assignment .)
    WHILE           reduce using rule 7 (simple_statement -> assignment .)
    FOR             reduce using rule 7 (simple_statement -> assignment .)
    $end            reduce using rule 7 (simple_statement -> assignment .)
    DEDENT          reduce using rule 7 (simple_statement -> assignment .)


state 8

    (8) simple_statement -> function_call .

    COMMENT         reduce using rule 8 (simple_statement -> function_call .)
    ID              reduce using rule 8 (simple_statement -> function_call .)
    RETURN          reduce using rule 8 (simple_statement -> function_call .)
    PRINT           reduce using rule 8 (simple_statement -> function_call .)
    DEF             reduce using rule 8 (simple_statement -> function_call .)
    IF              reduce using rule 8 (simple_statement -> function_call .)
    WHILE           reduce using rule 8 (simple_statement -> function_call .)
    FOR             reduce using rule 8 (simple_statement -> function_call .)
    $end            reduce using rule 8 (simple_statement -> function_call .)
    DEDENT          reduce using rule 8 (simple_statement -> function_call .)


state 9

    (9) simple_statement -> return_statement .

    COMMENT         reduce using rule 9 (simple_statement -> return_statement .)
    ID              reduce using rule 9 (simple_statement -> return_statement .)
    RETURN          reduce using rule 9 (simple_statement -> return_statement .)
    PRINT           reduce using rule 9 (simple_statement -> return_statement .)
    DEF             reduce using rule 9 (simple_statement -> return_statement .)
    IF              reduce using rule 9 (simple_statement -> return_statement .)
    WHILE           reduce using rule 9 (simple_statement -> return_statement .)
    FOR             reduce using rule 9 (simple_statement -> return_statement .)
    $end            reduce using rule 9 (simple_statement -> return_statement .)
    DEDENT          reduce using rule 9 (simple_statement -> return_statement .)


state 10

    (10) simple_statement -> print_statement .

    COMMENT         reduce using rule 10 (simple_statement -> print_statement .)
    ID              reduce using rule 10 (simple_statement -> print_statement .)
    RETURN          reduce using rule 10 (simple_statement -> print_statement .)
    PRINT           reduce using rule 10 (simple_statement -> print_statement .)
    DEF             reduce using rule 10 (simple_statement -> print_statement .)
    IF              reduce using rule 10 (simple_statement -> print_statement .)
    WHILE           reduce using rule 10 (simple_statement -> print_statement .)
    FOR             reduce using rule 10 (simple_statement -> print_statement .)
    $end            reduce using rule 10 (simple_statement -> print_statement .)
    DEDENT          reduce using rule 10 (simple_statement -> print_statement .)


state 11

    (11) compound_statement -> function_def .

    COMMENT         reduce using rule 11 (compound_statement -> function_def .)
    ID              reduce using rule 11 (compound_statement -> function_def .)
    RETURN          reduce using rule 11 (compound_statement -> function_def .)
    PRINT           reduce using rule 11 (compound_statement -> function_def .)
    DEF             reduce using rule 11 (compound_statement -> function_def .)
    IF              reduce using rule 11 (compound_statement -> function_def .)
    WHILE           reduce using rule 11 (compound_statement -> function_def .)
    FOR             reduce using rule 11 (compound_statement -> function_def .)
    $end            reduce using rule 11 (compound_statement -> function_def .)
    DEDENT          reduce using rule 11 (compound_statement -> function_def .)


state 12

    (12) compound_statement -> if_statement .

    COMMENT         reduce using rule 12 (compound_statement -> if_statement .)
    ID              reduce using rule 12 (compound_statement -> if_statement .)
    RETURN          reduce using rule 12 (compound_statement -> if_statement .)
    PRINT           reduce using rule 12 (compound_statement -> if_statement .)
    DEF             reduce using rule 12 (compound_statement -> if_statement .)
    IF              reduce using rule 12 (compound_statement -> if_statement .)
    WHILE           reduce using rule 12 (compound_statement -> if_statement .)
    FOR             reduce using rule 12 (compound_statement -> if_statement .)
    $end            reduce using rule 12 (compound_statement -> if_statement .)
    DEDENT          reduce using rule 12 (compound_statement -> if_statement .)


state 13

    (13) compound_statement -> while_statement .

    COMMENT         reduce using rule 13 (compound_statement -> while_statement .)
    ID              reduce using rule 13 (compound_statement -> while_statement .)
    RETURN          reduce using rule 13 (compound_statement -> while_statement .)
    PRINT           reduce using rule 13 (compound_statement -> while_statement .)
    DEF             reduce using rule 13 (compound_statement -> while_statement .)
    IF              reduce using rule 13 (compound_statement -> while_statement .)
    WHILE           reduce using rule 13 (compound_statement -> while_statement .)
    FOR             reduce using rule 13 (compound_statement -> while_statement .)
    $end            reduce using rule 13 (compound_statement -> while_statement .)
    DEDENT          reduce using rule 13 (compound_statement -> while_statement .)


state 14

    (14) compound_statement -> for_statement .

    COMMENT         reduce using rule 14 (compound_statement -> for_statement .)
    ID              reduce using rule 14 (compound_statement -> for_statement .)
    RETURN          reduce using rule 14 (compound_statement -> for_statement .)
    PRINT           reduce using rule 14 (compound_statement -> for_statement .)
    DEF             reduce using rule 14 (compound_statement -> for_statement .)
    IF              reduce using rule 14 (compound_statement -> for_statement .)
    WHILE           reduce using rule 14 (compound_statement -> for_statement .)
    FOR             reduce using rule 14 (compound_statement -> for_statement .)
    $end            reduce using rule 14 (compound_statement -> for_statement .)
    DEDENT          reduce using rule 14 (compound_statement -> for_statement .)


state 15

    (15) assignment -> ID . EQUALS expression
    (16) function_call -> ID . LPAREN expression_list RPAREN

    EQUALS          shift and go to state 23
    LPAREN          shift and go to state 24


state 16

    (20) return_statement -> RETURN . expression
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 25
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 17

    (21) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 35


state 18

    (22) function_def -> DEF . ID LPAREN parameter_list RPAREN COLON block

    ID              shift and go to state 36


state 19

    (26) if_statement -> IF . expression COLON block
    (27) if_statement -> IF . expression COLON block ELSE COLON block
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 37
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 20

    (28) while_statement -> WHILE . expression COLON block
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 38
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 21

    (29) for_statement -> FOR . ID IN expression COLON block

    ID              shift and go to state 39


state 22

    (3) statement_list -> statement_list statement .

    COMMENT         reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    DEDENT          reduce using rule 3 (statement_list -> statement_list statement .)


state 23

    (15) assignment -> ID EQUALS . expression
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 40
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 24

    (16) function_call -> ID LPAREN . expression_list RPAREN
    (17) expression_list -> . expression
    (18) expression_list -> . expression_list COMMA expression
    (19) expression_list -> .
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    RPAREN          reduce using rule 19 (expression_list -> .)
    COMMA           reduce using rule 19 (expression_list -> .)
    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression_list                shift and go to state 41
    expression                     shift and go to state 42
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 25

    (20) return_statement -> RETURN expression .

    COMMENT         reduce using rule 20 (return_statement -> RETURN expression .)
    ID              reduce using rule 20 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 20 (return_statement -> RETURN expression .)
    PRINT           reduce using rule 20 (return_statement -> RETURN expression .)
    DEF             reduce using rule 20 (return_statement -> RETURN expression .)
    IF              reduce using rule 20 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 20 (return_statement -> RETURN expression .)
    FOR             reduce using rule 20 (return_statement -> RETURN expression .)
    $end            reduce using rule 20 (return_statement -> RETURN expression .)
    DEDENT          reduce using rule 20 (return_statement -> RETURN expression .)


state 26

    (31) expression -> arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term
    (46) comparison_expr -> arithmetic_expr . GT arithmetic_expr
    (47) comparison_expr -> arithmetic_expr . LT arithmetic_expr
    (48) comparison_expr -> arithmetic_expr . GE arithmetic_expr
    (49) comparison_expr -> arithmetic_expr . LE arithmetic_expr
    (50) comparison_expr -> arithmetic_expr . EQ arithmetic_expr
    (51) comparison_expr -> arithmetic_expr . NE arithmetic_expr

    COMMENT         reduce using rule 31 (expression -> arithmetic_expr .)
    ID              reduce using rule 31 (expression -> arithmetic_expr .)
    RETURN          reduce using rule 31 (expression -> arithmetic_expr .)
    PRINT           reduce using rule 31 (expression -> arithmetic_expr .)
    DEF             reduce using rule 31 (expression -> arithmetic_expr .)
    IF              reduce using rule 31 (expression -> arithmetic_expr .)
    WHILE           reduce using rule 31 (expression -> arithmetic_expr .)
    FOR             reduce using rule 31 (expression -> arithmetic_expr .)
    $end            reduce using rule 31 (expression -> arithmetic_expr .)
    DEDENT          reduce using rule 31 (expression -> arithmetic_expr .)
    COLON           reduce using rule 31 (expression -> arithmetic_expr .)
    RPAREN          reduce using rule 31 (expression -> arithmetic_expr .)
    COMMA           reduce using rule 31 (expression -> arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GE              shift and go to state 47
    LE              shift and go to state 48
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 27

    (32) expression -> comparison_expr .

    COMMENT         reduce using rule 32 (expression -> comparison_expr .)
    ID              reduce using rule 32 (expression -> comparison_expr .)
    RETURN          reduce using rule 32 (expression -> comparison_expr .)
    PRINT           reduce using rule 32 (expression -> comparison_expr .)
    DEF             reduce using rule 32 (expression -> comparison_expr .)
    IF              reduce using rule 32 (expression -> comparison_expr .)
    WHILE           reduce using rule 32 (expression -> comparison_expr .)
    FOR             reduce using rule 32 (expression -> comparison_expr .)
    $end            reduce using rule 32 (expression -> comparison_expr .)
    DEDENT          reduce using rule 32 (expression -> comparison_expr .)
    COLON           reduce using rule 32 (expression -> comparison_expr .)
    RPAREN          reduce using rule 32 (expression -> comparison_expr .)
    COMMA           reduce using rule 32 (expression -> comparison_expr .)


state 28

    (33) expression -> STRING .

    COMMENT         reduce using rule 33 (expression -> STRING .)
    ID              reduce using rule 33 (expression -> STRING .)
    RETURN          reduce using rule 33 (expression -> STRING .)
    PRINT           reduce using rule 33 (expression -> STRING .)
    DEF             reduce using rule 33 (expression -> STRING .)
    IF              reduce using rule 33 (expression -> STRING .)
    WHILE           reduce using rule 33 (expression -> STRING .)
    FOR             reduce using rule 33 (expression -> STRING .)
    $end            reduce using rule 33 (expression -> STRING .)
    DEDENT          reduce using rule 33 (expression -> STRING .)
    COLON           reduce using rule 33 (expression -> STRING .)
    RPAREN          reduce using rule 33 (expression -> STRING .)
    COMMA           reduce using rule 33 (expression -> STRING .)


state 29

    (34) expression -> NUMBER .
    (44) factor -> NUMBER .

  ! reduce/reduce conflict for COMMENT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for ID resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEF resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEDENT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> NUMBER .)
    COMMENT         reduce using rule 34 (expression -> NUMBER .)
    ID              reduce using rule 34 (expression -> NUMBER .)
    RETURN          reduce using rule 34 (expression -> NUMBER .)
    PRINT           reduce using rule 34 (expression -> NUMBER .)
    DEF             reduce using rule 34 (expression -> NUMBER .)
    IF              reduce using rule 34 (expression -> NUMBER .)
    WHILE           reduce using rule 34 (expression -> NUMBER .)
    FOR             reduce using rule 34 (expression -> NUMBER .)
    $end            reduce using rule 34 (expression -> NUMBER .)
    DEDENT          reduce using rule 34 (expression -> NUMBER .)
    COLON           reduce using rule 34 (expression -> NUMBER .)
    RPAREN          reduce using rule 34 (expression -> NUMBER .)
    COMMA           reduce using rule 34 (expression -> NUMBER .)
    TIMES           reduce using rule 44 (factor -> NUMBER .)
    DIVIDE          reduce using rule 44 (factor -> NUMBER .)
    PLUS            reduce using rule 44 (factor -> NUMBER .)
    MINUS           reduce using rule 44 (factor -> NUMBER .)
    GT              reduce using rule 44 (factor -> NUMBER .)
    LT              reduce using rule 44 (factor -> NUMBER .)
    GE              reduce using rule 44 (factor -> NUMBER .)
    LE              reduce using rule 44 (factor -> NUMBER .)
    EQ              reduce using rule 44 (factor -> NUMBER .)
    NE              reduce using rule 44 (factor -> NUMBER .)

  ! COMMENT         [ reduce using rule 44 (factor -> NUMBER .) ]
  ! ID              [ reduce using rule 44 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 44 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 44 (factor -> NUMBER .) ]
  ! DEF             [ reduce using rule 44 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 44 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 44 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 44 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 44 (factor -> NUMBER .) ]
  ! DEDENT          [ reduce using rule 44 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 44 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 44 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 44 (factor -> NUMBER .) ]


state 30

    (35) expression -> ID .
    (16) function_call -> ID . LPAREN expression_list RPAREN
    (45) factor -> ID .

  ! reduce/reduce conflict for COMMENT resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for DEDENT resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (expression -> ID .)
    COMMENT         reduce using rule 35 (expression -> ID .)
    ID              reduce using rule 35 (expression -> ID .)
    RETURN          reduce using rule 35 (expression -> ID .)
    PRINT           reduce using rule 35 (expression -> ID .)
    DEF             reduce using rule 35 (expression -> ID .)
    IF              reduce using rule 35 (expression -> ID .)
    WHILE           reduce using rule 35 (expression -> ID .)
    FOR             reduce using rule 35 (expression -> ID .)
    $end            reduce using rule 35 (expression -> ID .)
    DEDENT          reduce using rule 35 (expression -> ID .)
    COLON           reduce using rule 35 (expression -> ID .)
    RPAREN          reduce using rule 35 (expression -> ID .)
    COMMA           reduce using rule 35 (expression -> ID .)
    LPAREN          shift and go to state 24
    TIMES           reduce using rule 45 (factor -> ID .)
    DIVIDE          reduce using rule 45 (factor -> ID .)
    PLUS            reduce using rule 45 (factor -> ID .)
    MINUS           reduce using rule 45 (factor -> ID .)
    GT              reduce using rule 45 (factor -> ID .)
    LT              reduce using rule 45 (factor -> ID .)
    GE              reduce using rule 45 (factor -> ID .)
    LE              reduce using rule 45 (factor -> ID .)
    EQ              reduce using rule 45 (factor -> ID .)
    NE              reduce using rule 45 (factor -> ID .)

  ! COMMENT         [ reduce using rule 45 (factor -> ID .) ]
  ! ID              [ reduce using rule 45 (factor -> ID .) ]
  ! RETURN          [ reduce using rule 45 (factor -> ID .) ]
  ! PRINT           [ reduce using rule 45 (factor -> ID .) ]
  ! DEF             [ reduce using rule 45 (factor -> ID .) ]
  ! IF              [ reduce using rule 45 (factor -> ID .) ]
  ! WHILE           [ reduce using rule 45 (factor -> ID .) ]
  ! FOR             [ reduce using rule 45 (factor -> ID .) ]
  ! $end            [ reduce using rule 45 (factor -> ID .) ]
  ! DEDENT          [ reduce using rule 45 (factor -> ID .) ]
  ! COLON           [ reduce using rule 45 (factor -> ID .) ]
  ! RPAREN          [ reduce using rule 45 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 45 (factor -> ID .) ]


state 31

    (36) expression -> function_call .

    COMMENT         reduce using rule 36 (expression -> function_call .)
    ID              reduce using rule 36 (expression -> function_call .)
    RETURN          reduce using rule 36 (expression -> function_call .)
    PRINT           reduce using rule 36 (expression -> function_call .)
    DEF             reduce using rule 36 (expression -> function_call .)
    IF              reduce using rule 36 (expression -> function_call .)
    WHILE           reduce using rule 36 (expression -> function_call .)
    FOR             reduce using rule 36 (expression -> function_call .)
    $end            reduce using rule 36 (expression -> function_call .)
    DEDENT          reduce using rule 36 (expression -> function_call .)
    COLON           reduce using rule 36 (expression -> function_call .)
    RPAREN          reduce using rule 36 (expression -> function_call .)
    COMMA           reduce using rule 36 (expression -> function_call .)


state 32

    (37) arithmetic_expr -> term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 37 (arithmetic_expr -> term .)
    MINUS           reduce using rule 37 (arithmetic_expr -> term .)
    GT              reduce using rule 37 (arithmetic_expr -> term .)
    LT              reduce using rule 37 (arithmetic_expr -> term .)
    GE              reduce using rule 37 (arithmetic_expr -> term .)
    LE              reduce using rule 37 (arithmetic_expr -> term .)
    EQ              reduce using rule 37 (arithmetic_expr -> term .)
    NE              reduce using rule 37 (arithmetic_expr -> term .)
    COMMENT         reduce using rule 37 (arithmetic_expr -> term .)
    ID              reduce using rule 37 (arithmetic_expr -> term .)
    RETURN          reduce using rule 37 (arithmetic_expr -> term .)
    PRINT           reduce using rule 37 (arithmetic_expr -> term .)
    DEF             reduce using rule 37 (arithmetic_expr -> term .)
    IF              reduce using rule 37 (arithmetic_expr -> term .)
    WHILE           reduce using rule 37 (arithmetic_expr -> term .)
    FOR             reduce using rule 37 (arithmetic_expr -> term .)
    $end            reduce using rule 37 (arithmetic_expr -> term .)
    DEDENT          reduce using rule 37 (arithmetic_expr -> term .)
    COLON           reduce using rule 37 (arithmetic_expr -> term .)
    RPAREN          reduce using rule 37 (arithmetic_expr -> term .)
    COMMA           reduce using rule 37 (arithmetic_expr -> term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 33

    (43) factor -> LPAREN . expression RPAREN
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 53
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 34

    (40) term -> factor .

    TIMES           reduce using rule 40 (term -> factor .)
    DIVIDE          reduce using rule 40 (term -> factor .)
    PLUS            reduce using rule 40 (term -> factor .)
    MINUS           reduce using rule 40 (term -> factor .)
    GT              reduce using rule 40 (term -> factor .)
    LT              reduce using rule 40 (term -> factor .)
    GE              reduce using rule 40 (term -> factor .)
    LE              reduce using rule 40 (term -> factor .)
    EQ              reduce using rule 40 (term -> factor .)
    NE              reduce using rule 40 (term -> factor .)
    COMMENT         reduce using rule 40 (term -> factor .)
    ID              reduce using rule 40 (term -> factor .)
    RETURN          reduce using rule 40 (term -> factor .)
    PRINT           reduce using rule 40 (term -> factor .)
    DEF             reduce using rule 40 (term -> factor .)
    IF              reduce using rule 40 (term -> factor .)
    WHILE           reduce using rule 40 (term -> factor .)
    FOR             reduce using rule 40 (term -> factor .)
    $end            reduce using rule 40 (term -> factor .)
    DEDENT          reduce using rule 40 (term -> factor .)
    COLON           reduce using rule 40 (term -> factor .)
    RPAREN          reduce using rule 40 (term -> factor .)
    COMMA           reduce using rule 40 (term -> factor .)


state 35

    (21) print_statement -> PRINT LPAREN . expression RPAREN
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 54
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 36

    (22) function_def -> DEF ID . LPAREN parameter_list RPAREN COLON block

    LPAREN          shift and go to state 55


state 37

    (26) if_statement -> IF expression . COLON block
    (27) if_statement -> IF expression . COLON block ELSE COLON block

    COLON           shift and go to state 56


state 38

    (28) while_statement -> WHILE expression . COLON block

    COLON           shift and go to state 57


state 39

    (29) for_statement -> FOR ID . IN expression COLON block

    IN              shift and go to state 58


state 40

    (15) assignment -> ID EQUALS expression .

    COMMENT         reduce using rule 15 (assignment -> ID EQUALS expression .)
    ID              reduce using rule 15 (assignment -> ID EQUALS expression .)
    RETURN          reduce using rule 15 (assignment -> ID EQUALS expression .)
    PRINT           reduce using rule 15 (assignment -> ID EQUALS expression .)
    DEF             reduce using rule 15 (assignment -> ID EQUALS expression .)
    IF              reduce using rule 15 (assignment -> ID EQUALS expression .)
    WHILE           reduce using rule 15 (assignment -> ID EQUALS expression .)
    FOR             reduce using rule 15 (assignment -> ID EQUALS expression .)
    $end            reduce using rule 15 (assignment -> ID EQUALS expression .)
    DEDENT          reduce using rule 15 (assignment -> ID EQUALS expression .)


state 41

    (16) function_call -> ID LPAREN expression_list . RPAREN
    (18) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 59
    COMMA           shift and go to state 60


state 42

    (17) expression_list -> expression .

    RPAREN          reduce using rule 17 (expression_list -> expression .)
    COMMA           reduce using rule 17 (expression_list -> expression .)


state 43

    (38) arithmetic_expr -> arithmetic_expr PLUS . term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    term                           shift and go to state 61
    factor                         shift and go to state 34

state 44

    (39) arithmetic_expr -> arithmetic_expr MINUS . term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    term                           shift and go to state 64
    factor                         shift and go to state 34

state 45

    (46) comparison_expr -> arithmetic_expr GT . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 65
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 46

    (47) comparison_expr -> arithmetic_expr LT . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 66
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 47

    (48) comparison_expr -> arithmetic_expr GE . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 67
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 48

    (49) comparison_expr -> arithmetic_expr LE . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 68
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 49

    (50) comparison_expr -> arithmetic_expr EQ . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 69
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 50

    (51) comparison_expr -> arithmetic_expr NE . arithmetic_expr
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    arithmetic_expr                shift and go to state 70
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 51

    (41) term -> term TIMES . factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    factor                         shift and go to state 71

state 52

    (42) term -> term DIVIDE . factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 62
    ID              shift and go to state 63

    factor                         shift and go to state 72

state 53

    (43) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 73


state 54

    (21) print_statement -> PRINT LPAREN expression . RPAREN

    RPAREN          shift and go to state 74


state 55

    (22) function_def -> DEF ID LPAREN . parameter_list RPAREN COLON block
    (23) parameter_list -> . ID
    (24) parameter_list -> . parameter_list COMMA ID
    (25) parameter_list -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 25 (parameter_list -> .)
    COMMA           reduce using rule 25 (parameter_list -> .)

    parameter_list                 shift and go to state 76

state 56

    (26) if_statement -> IF expression COLON . block
    (27) if_statement -> IF expression COLON . block ELSE COLON block
    (30) block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 78

    block                          shift and go to state 77

state 57

    (28) while_statement -> WHILE expression COLON . block
    (30) block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 78

    block                          shift and go to state 79

state 58

    (29) for_statement -> FOR ID IN . expression COLON block
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 80
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 59

    (16) function_call -> ID LPAREN expression_list RPAREN .

    COMMENT         reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    RETURN          reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    PRINT           reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    DEF             reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    IF              reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    WHILE           reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    FOR             reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    $end            reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    DEDENT          reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 16 (function_call -> ID LPAREN expression_list RPAREN .)


state 60

    (18) expression_list -> expression_list COMMA . expression
    (31) expression -> . arithmetic_expr
    (32) expression -> . comparison_expr
    (33) expression -> . STRING
    (34) expression -> . NUMBER
    (35) expression -> . ID
    (36) expression -> . function_call
    (37) arithmetic_expr -> . term
    (38) arithmetic_expr -> . arithmetic_expr PLUS term
    (39) arithmetic_expr -> . arithmetic_expr MINUS term
    (46) comparison_expr -> . arithmetic_expr GT arithmetic_expr
    (47) comparison_expr -> . arithmetic_expr LT arithmetic_expr
    (48) comparison_expr -> . arithmetic_expr GE arithmetic_expr
    (49) comparison_expr -> . arithmetic_expr LE arithmetic_expr
    (50) comparison_expr -> . arithmetic_expr EQ arithmetic_expr
    (51) comparison_expr -> . arithmetic_expr NE arithmetic_expr
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (40) term -> . factor
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) factor -> . LPAREN expression RPAREN
    (44) factor -> . NUMBER
    (45) factor -> . ID

    STRING          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 33

    expression                     shift and go to state 81
    arithmetic_expr                shift and go to state 26
    comparison_expr                shift and go to state 27
    function_call                  shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 34

state 61

    (38) arithmetic_expr -> arithmetic_expr PLUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    MINUS           reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    GT              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    LT              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    GE              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    LE              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    EQ              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    NE              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    COMMENT         reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    ID              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    RETURN          reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    PRINT           reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    DEF             reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    IF              reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    WHILE           reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    FOR             reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    $end            reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    DEDENT          reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    COLON           reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    RPAREN          reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    COMMA           reduce using rule 38 (arithmetic_expr -> arithmetic_expr PLUS term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 62

    (44) factor -> NUMBER .

    TIMES           reduce using rule 44 (factor -> NUMBER .)
    DIVIDE          reduce using rule 44 (factor -> NUMBER .)
    PLUS            reduce using rule 44 (factor -> NUMBER .)
    MINUS           reduce using rule 44 (factor -> NUMBER .)
    GT              reduce using rule 44 (factor -> NUMBER .)
    LT              reduce using rule 44 (factor -> NUMBER .)
    GE              reduce using rule 44 (factor -> NUMBER .)
    LE              reduce using rule 44 (factor -> NUMBER .)
    EQ              reduce using rule 44 (factor -> NUMBER .)
    NE              reduce using rule 44 (factor -> NUMBER .)
    COMMENT         reduce using rule 44 (factor -> NUMBER .)
    ID              reduce using rule 44 (factor -> NUMBER .)
    RETURN          reduce using rule 44 (factor -> NUMBER .)
    PRINT           reduce using rule 44 (factor -> NUMBER .)
    DEF             reduce using rule 44 (factor -> NUMBER .)
    IF              reduce using rule 44 (factor -> NUMBER .)
    WHILE           reduce using rule 44 (factor -> NUMBER .)
    FOR             reduce using rule 44 (factor -> NUMBER .)
    $end            reduce using rule 44 (factor -> NUMBER .)
    DEDENT          reduce using rule 44 (factor -> NUMBER .)
    COLON           reduce using rule 44 (factor -> NUMBER .)
    RPAREN          reduce using rule 44 (factor -> NUMBER .)
    COMMA           reduce using rule 44 (factor -> NUMBER .)


state 63

    (45) factor -> ID .

    TIMES           reduce using rule 45 (factor -> ID .)
    DIVIDE          reduce using rule 45 (factor -> ID .)
    PLUS            reduce using rule 45 (factor -> ID .)
    MINUS           reduce using rule 45 (factor -> ID .)
    GT              reduce using rule 45 (factor -> ID .)
    LT              reduce using rule 45 (factor -> ID .)
    GE              reduce using rule 45 (factor -> ID .)
    LE              reduce using rule 45 (factor -> ID .)
    EQ              reduce using rule 45 (factor -> ID .)
    NE              reduce using rule 45 (factor -> ID .)
    COMMENT         reduce using rule 45 (factor -> ID .)
    ID              reduce using rule 45 (factor -> ID .)
    RETURN          reduce using rule 45 (factor -> ID .)
    PRINT           reduce using rule 45 (factor -> ID .)
    DEF             reduce using rule 45 (factor -> ID .)
    IF              reduce using rule 45 (factor -> ID .)
    WHILE           reduce using rule 45 (factor -> ID .)
    FOR             reduce using rule 45 (factor -> ID .)
    $end            reduce using rule 45 (factor -> ID .)
    DEDENT          reduce using rule 45 (factor -> ID .)
    COLON           reduce using rule 45 (factor -> ID .)
    RPAREN          reduce using rule 45 (factor -> ID .)
    COMMA           reduce using rule 45 (factor -> ID .)


state 64

    (39) arithmetic_expr -> arithmetic_expr MINUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    MINUS           reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    GT              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    LT              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    GE              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    LE              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    EQ              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    NE              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    COMMENT         reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    ID              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    RETURN          reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    PRINT           reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    DEF             reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    IF              reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    WHILE           reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    FOR             reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    $end            reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    DEDENT          reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    COLON           reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    RPAREN          reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    COMMA           reduce using rule 39 (arithmetic_expr -> arithmetic_expr MINUS term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 65

    (46) comparison_expr -> arithmetic_expr GT arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    ID              reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    RETURN          reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    PRINT           reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    DEF             reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    IF              reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    WHILE           reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    FOR             reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    $end            reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    DEDENT          reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    COLON           reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    RPAREN          reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    COMMA           reduce using rule 46 (comparison_expr -> arithmetic_expr GT arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 66

    (47) comparison_expr -> arithmetic_expr LT arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    ID              reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    RETURN          reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    PRINT           reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    DEF             reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    IF              reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    WHILE           reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    FOR             reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    $end            reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    DEDENT          reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    COLON           reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    RPAREN          reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    COMMA           reduce using rule 47 (comparison_expr -> arithmetic_expr LT arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 67

    (48) comparison_expr -> arithmetic_expr GE arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    ID              reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    RETURN          reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    PRINT           reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    DEF             reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    IF              reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    WHILE           reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    FOR             reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    $end            reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    DEDENT          reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    COLON           reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    RPAREN          reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    COMMA           reduce using rule 48 (comparison_expr -> arithmetic_expr GE arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 68

    (49) comparison_expr -> arithmetic_expr LE arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    ID              reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    RETURN          reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    PRINT           reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    DEF             reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    IF              reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    WHILE           reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    FOR             reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    $end            reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    DEDENT          reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    COLON           reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    RPAREN          reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    COMMA           reduce using rule 49 (comparison_expr -> arithmetic_expr LE arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 69

    (50) comparison_expr -> arithmetic_expr EQ arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    ID              reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    RETURN          reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    PRINT           reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    DEF             reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    IF              reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    WHILE           reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    FOR             reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    $end            reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    DEDENT          reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    COLON           reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    RPAREN          reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    COMMA           reduce using rule 50 (comparison_expr -> arithmetic_expr EQ arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 70

    (51) comparison_expr -> arithmetic_expr NE arithmetic_expr .
    (38) arithmetic_expr -> arithmetic_expr . PLUS term
    (39) arithmetic_expr -> arithmetic_expr . MINUS term

    COMMENT         reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    ID              reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    RETURN          reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    PRINT           reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    DEF             reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    IF              reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    WHILE           reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    FOR             reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    $end            reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    DEDENT          reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    COLON           reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    RPAREN          reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    COMMA           reduce using rule 51 (comparison_expr -> arithmetic_expr NE arithmetic_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 71

    (41) term -> term TIMES factor .

    TIMES           reduce using rule 41 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 41 (term -> term TIMES factor .)
    PLUS            reduce using rule 41 (term -> term TIMES factor .)
    MINUS           reduce using rule 41 (term -> term TIMES factor .)
    GT              reduce using rule 41 (term -> term TIMES factor .)
    LT              reduce using rule 41 (term -> term TIMES factor .)
    GE              reduce using rule 41 (term -> term TIMES factor .)
    LE              reduce using rule 41 (term -> term TIMES factor .)
    EQ              reduce using rule 41 (term -> term TIMES factor .)
    NE              reduce using rule 41 (term -> term TIMES factor .)
    COMMENT         reduce using rule 41 (term -> term TIMES factor .)
    ID              reduce using rule 41 (term -> term TIMES factor .)
    RETURN          reduce using rule 41 (term -> term TIMES factor .)
    PRINT           reduce using rule 41 (term -> term TIMES factor .)
    DEF             reduce using rule 41 (term -> term TIMES factor .)
    IF              reduce using rule 41 (term -> term TIMES factor .)
    WHILE           reduce using rule 41 (term -> term TIMES factor .)
    FOR             reduce using rule 41 (term -> term TIMES factor .)
    $end            reduce using rule 41 (term -> term TIMES factor .)
    DEDENT          reduce using rule 41 (term -> term TIMES factor .)
    COLON           reduce using rule 41 (term -> term TIMES factor .)
    RPAREN          reduce using rule 41 (term -> term TIMES factor .)
    COMMA           reduce using rule 41 (term -> term TIMES factor .)


state 72

    (42) term -> term DIVIDE factor .

    TIMES           reduce using rule 42 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 42 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 42 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 42 (term -> term DIVIDE factor .)
    GT              reduce using rule 42 (term -> term DIVIDE factor .)
    LT              reduce using rule 42 (term -> term DIVIDE factor .)
    GE              reduce using rule 42 (term -> term DIVIDE factor .)
    LE              reduce using rule 42 (term -> term DIVIDE factor .)
    EQ              reduce using rule 42 (term -> term DIVIDE factor .)
    NE              reduce using rule 42 (term -> term DIVIDE factor .)
    COMMENT         reduce using rule 42 (term -> term DIVIDE factor .)
    ID              reduce using rule 42 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 42 (term -> term DIVIDE factor .)
    PRINT           reduce using rule 42 (term -> term DIVIDE factor .)
    DEF             reduce using rule 42 (term -> term DIVIDE factor .)
    IF              reduce using rule 42 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 42 (term -> term DIVIDE factor .)
    FOR             reduce using rule 42 (term -> term DIVIDE factor .)
    $end            reduce using rule 42 (term -> term DIVIDE factor .)
    DEDENT          reduce using rule 42 (term -> term DIVIDE factor .)
    COLON           reduce using rule 42 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 42 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 42 (term -> term DIVIDE factor .)


state 73

    (43) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    COMMENT         reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    DEDENT          reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 43 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 43 (factor -> LPAREN expression RPAREN .)


state 74

    (21) print_statement -> PRINT LPAREN expression RPAREN .

    COMMENT         reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    ID              reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEF             reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEDENT          reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN .)


state 75

    (23) parameter_list -> ID .

    RPAREN          reduce using rule 23 (parameter_list -> ID .)
    COMMA           reduce using rule 23 (parameter_list -> ID .)


state 76

    (22) function_def -> DEF ID LPAREN parameter_list . RPAREN COLON block
    (24) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 82
    COMMA           shift and go to state 83


state 77

    (26) if_statement -> IF expression COLON block .
    (27) if_statement -> IF expression COLON block . ELSE COLON block

    COMMENT         reduce using rule 26 (if_statement -> IF expression COLON block .)
    ID              reduce using rule 26 (if_statement -> IF expression COLON block .)
    RETURN          reduce using rule 26 (if_statement -> IF expression COLON block .)
    PRINT           reduce using rule 26 (if_statement -> IF expression COLON block .)
    DEF             reduce using rule 26 (if_statement -> IF expression COLON block .)
    IF              reduce using rule 26 (if_statement -> IF expression COLON block .)
    WHILE           reduce using rule 26 (if_statement -> IF expression COLON block .)
    FOR             reduce using rule 26 (if_statement -> IF expression COLON block .)
    $end            reduce using rule 26 (if_statement -> IF expression COLON block .)
    DEDENT          reduce using rule 26 (if_statement -> IF expression COLON block .)
    ELSE            shift and go to state 84


state 78

    (30) block -> INDENT . statement_list DEDENT
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) statement -> . COMMENT
    (7) simple_statement -> . assignment
    (8) simple_statement -> . function_call
    (9) simple_statement -> . return_statement
    (10) simple_statement -> . print_statement
    (11) compound_statement -> . function_def
    (12) compound_statement -> . if_statement
    (13) compound_statement -> . while_statement
    (14) compound_statement -> . for_statement
    (15) assignment -> . ID EQUALS expression
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (20) return_statement -> . RETURN expression
    (21) print_statement -> . PRINT LPAREN expression RPAREN
    (22) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON block
    (26) if_statement -> . IF expression COLON block
    (27) if_statement -> . IF expression COLON block ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block
    (29) for_statement -> . FOR ID IN expression COLON block

    COMMENT         shift and go to state 6
    ID              shift and go to state 15
    RETURN          shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    statement_list                 shift and go to state 85
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    assignment                     shift and go to state 7
    function_call                  shift and go to state 8
    return_statement               shift and go to state 9
    print_statement                shift and go to state 10
    function_def                   shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    for_statement                  shift and go to state 14

state 79

    (28) while_statement -> WHILE expression COLON block .

    COMMENT         reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    ID              reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    RETURN          reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    PRINT           reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    DEF             reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    IF              reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    WHILE           reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    FOR             reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    $end            reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    DEDENT          reduce using rule 28 (while_statement -> WHILE expression COLON block .)


state 80

    (29) for_statement -> FOR ID IN expression . COLON block

    COLON           shift and go to state 86


state 81

    (18) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 18 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 18 (expression_list -> expression_list COMMA expression .)


state 82

    (22) function_def -> DEF ID LPAREN parameter_list RPAREN . COLON block

    COLON           shift and go to state 87


state 83

    (24) parameter_list -> parameter_list COMMA . ID

    ID              shift and go to state 88


state 84

    (27) if_statement -> IF expression COLON block ELSE . COLON block

    COLON           shift and go to state 89


state 85

    (30) block -> INDENT statement_list . DEDENT
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) statement -> . COMMENT
    (7) simple_statement -> . assignment
    (8) simple_statement -> . function_call
    (9) simple_statement -> . return_statement
    (10) simple_statement -> . print_statement
    (11) compound_statement -> . function_def
    (12) compound_statement -> . if_statement
    (13) compound_statement -> . while_statement
    (14) compound_statement -> . for_statement
    (15) assignment -> . ID EQUALS expression
    (16) function_call -> . ID LPAREN expression_list RPAREN
    (20) return_statement -> . RETURN expression
    (21) print_statement -> . PRINT LPAREN expression RPAREN
    (22) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON block
    (26) if_statement -> . IF expression COLON block
    (27) if_statement -> . IF expression COLON block ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block
    (29) for_statement -> . FOR ID IN expression COLON block

    DEDENT          shift and go to state 90
    COMMENT         shift and go to state 6
    ID              shift and go to state 15
    RETURN          shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    statement                      shift and go to state 22
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    assignment                     shift and go to state 7
    function_call                  shift and go to state 8
    return_statement               shift and go to state 9
    print_statement                shift and go to state 10
    function_def                   shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    for_statement                  shift and go to state 14

state 86

    (29) for_statement -> FOR ID IN expression COLON . block
    (30) block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 78

    block                          shift and go to state 91

state 87

    (22) function_def -> DEF ID LPAREN parameter_list RPAREN COLON . block
    (30) block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 78

    block                          shift and go to state 92

state 88

    (24) parameter_list -> parameter_list COMMA ID .

    RPAREN          reduce using rule 24 (parameter_list -> parameter_list COMMA ID .)
    COMMA           reduce using rule 24 (parameter_list -> parameter_list COMMA ID .)


state 89

    (27) if_statement -> IF expression COLON block ELSE COLON . block
    (30) block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 78

    block                          shift and go to state 93

state 90

    (30) block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    COMMENT         reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    ID              reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    PRINT           reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    DEF             reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 30 (block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 30 (block -> INDENT statement_list DEDENT .)


state 91

    (29) for_statement -> FOR ID IN expression COLON block .

    COMMENT         reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    ID              reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    RETURN          reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    PRINT           reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    DEF             reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    IF              reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    WHILE           reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    FOR             reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    $end            reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)
    DEDENT          reduce using rule 29 (for_statement -> FOR ID IN expression COLON block .)


state 92

    (22) function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .

    COMMENT         reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    ID              reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    RETURN          reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    PRINT           reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    DEF             reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    IF              reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    WHILE           reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    FOR             reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    $end            reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)
    DEDENT          reduce using rule 22 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON block .)


state 93

    (27) if_statement -> IF expression COLON block ELSE COLON block .

    COMMENT         reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    ID              reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    RETURN          reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    PRINT           reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    DEF             reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    IF              reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    WHILE           reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    FOR             reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    $end            reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)
    DEDENT          reduce using rule 27 (if_statement -> IF expression COLON block ELSE COLON block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 29 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 29
WARNING: reduce/reduce conflict in state 30 resolved using rule (expression -> ID)
WARNING: rejected rule (factor -> ID) in state 30
